// TODO: This Chain of responsibility pattern helps reduce coupling in the system. Also it helps to make the system open to extensions and close to modifications.

Advantages -->
1. You can control the order of request handling.
2. Single Responsibility Principle. You can decouple classes that invoke operations from classes that perform operations.
3. Open/Closed Principle. You can introduce new handlers into the app without breaking the existing client code. (Open to Extensions and close to Modifications)



The Chain of Responsibility is a behavioral design pattern that allows an object to pass along a request to a chain of potential handlers until
it is processed by one of them. It's like a series of customer service representatives. When you call, the first representative might
not be able to solve your problem, so they pass you on to the next one, and so on, until you reach someone who can help.




Sure, let's break down the Chain of Responsibility design pattern and how it's used in Java.

The Chain of Responsibility is a behavioral design pattern that allows an object to pass along a request to a chain of potential handlers until it is processed by one of them. It decouples the sender of a request from its receiver by giving multiple objects a chance to handle the request.

Here's a simple analogy: Imagine you're playing a game of hot potato. You quickly pass the potato (request) to the next player (handler). If they can't handle it, they pass it to the next player, and so on, until it reaches a player who can handle it or there are no more players left.

In the context of programming, the "hot potato" is a request, and the players are objects known as handlers. Each handler decides either to process the request or to pass it to the next handler in the chain.

Components of the Chain of Responsibility pattern include:

1. **Handler**: This is an interface which defines a method for handling requests. All the concrete handlers implement this interface.

2. **Concrete Handlers**: These are the classes that handle the requests. They should have access to the next handler in the chain to pass the request along if they can't handle it.

3. **Client**: This is the class that initiates the request to a chain of handler objects.

Let's look at a simple example in Java:

```java
// Handler
interface Handler {
    void setNext(Handler handler);
    void handleRequest(String request);
}

// Concrete Handlers
class HandlerA implements Handler {
    private Handler next;

    public void setNext(Handler handler) {
        this.next = handler;
    }

    public void handleRequest(String request) {
        if ("Request A".equals(request)) {
            System.out.println("Handler A handled the request");
        } else if (next != null) {
            next.handleRequest(request);
        }
    }
}

class HandlerB implements Handler {
    private Handler next;

    public void setNext(Handler handler) {
        this.next = handler;
    }

    public void handleRequest(String request) {
        if ("Request B".equals(request)) {
            System.out.println("Handler B handled the request");
        } else if (next != null) {
            next.handleRequest(request);
        }
    }
}

// Client
public class Client {
    public static void main(String[] args) {
        Handler handlerA = new HandlerA();
        Handler handlerB = new HandlerB();

        handlerA.setNext(handlerB);

        handlerA.handleRequest("Request A");
        handlerA.handleRequest("Request B");
    }
}
```

In this example, `HandlerA` and `HandlerB` are the concrete handlers. If `HandlerA` can't handle the request, it passes it to `HandlerB`. The client (in the `main` method) creates the handlers and chains them together. It then initiates the requests.

This pattern is useful when there's more than one way to handle a request and the handler isn't known at the time of the request. It's often used in graphical systems to handle events: the event is passed from one widget to the next until it's handled.