This is a complex question that involves understanding of object-oriented programming, serialization, and exception handling in Java. Let's break it down:

(a) Serialization is the process of converting an object's state to a byte stream, and the reverse operation is called deserialization. This is used when you want to save the state of an object so that it can be recreated later, which is exactly what we need for the pending bills.

i. The class that should be serialized is the `Bill` class. This is because the `Bill` object holds all the information about a transaction, including the cashier's name, branch, customer name, grocery item list, total discount, total price, date, and time. By serializing the `Bill` object, we can save the state of a partially completed bill and resume it later.

ii. The attributes that should be serialized are all the attributes of the `Bill` class that represent the state of the bill. This includes the cashier's name, branch, customer name, grocery item list, total discount, total price, date, and time. However, any attributes that are derived from other attributes (for example, if the total price is calculated from the grocery item list) do not need to be serialized, because they can be recalculated when the object is deserialized.

(b) Here is a basic implementation of the `Bill` class:

```java
import java.io.Serializable;
import java.util.List;

public class Bill implements Serializable {
    private String cashierName;
    private String branch;
    private String customerName;
    private List<Item> groceryItemList; // Assume Item is a class that represents a grocery item
    private double totalDiscount;
    private double totalPrice;
    private String date;
    private String time;

    public Bill(String cashierName, String branch, String customerName, List<Item> groceryItemList, double totalDiscount, double totalPrice, String date, String time) {
        this.cashierName = cashierName;
        this.branch = branch;
        this.customerName = customerName;
        this.groceryItemList = groceryItemList;
        this.totalDiscount = totalDiscount;
        this.totalPrice = totalPrice;
        this.date = date;
        this.time = time;
    }
}
```

(c) To write and read serialized objects to and from the disk, you should use `ObjectOutputStream` and `ObjectInputStream`, respectively. These are high-level streams that contain the methods for serializing and deserializing an object.

(d) Here is a basic implementation of the `ItemCodeNotFound` exception:

```java
public class ItemCodeNotFound extends Exception {
    public ItemCodeNotFound(String message) {
        super(message);
    }
}
```

This custom exception can be thrown when a cashier enters an item code that does not exist in the database. The message parameter can be used to pass a detailed error message when the exception is thrown.
